eta_product21 = np.array([1, -1, 1, -1, -2, -1, -1, 3, 1, 2, 4, -1, -2, 1, -2, -1, -6, -1, 4, 2, -1, -4, 0, 3, -1, 2, 1, 1, -2, 2, 0, -5, 4, 6, 2, -1, 6, -4, -2, -6, 2, 1, -4, -4, -2, 0, 0, -1, 1, 1, -6, 2, 6, -1, -8, -3, 4, 2, 12, 2, -2, 0, -1, 7, 4, -4, 4, 6, 0, -2, 0, 3, -6, -6, -1, -4, -4, 2, -16, 2, 1, -2, -12, 1, 12, 4, -2, 12, -14, 2, 2, 0, 0, 0, -8, -5, 18, -1, 4, 1, 14, 6, 8, -6, 2, -6, 4, -1, -18, 8, 6, 1, -14, -4, 0, 2, -2, -12, 6, -6, 5, 2, 2, 0, 12, 1, 0, 3, -4, -4, 4, -4, -4, -4, -2, -18, -6, 0, 12, -2, 0, 0, -8, -1, 4, 6, 1, -6, 6, 1, 8, 12, -6, 4, 0, 2, -2, 16, 6, 10, 0, -1, 4, -2, -8, 12, -8, -3, -9, -12, 4, 4, -10, 2, 1, -4, 12, 14, -4, 2, -26, -2, -2, 0, -12, 0, -24, 0, -1, 8, -8, 7, 2, -18, 4, -1, 22, -4, 24, -3, 4, -14, 2, 6, -4, -8, 0, 2, 16, -2, 4, -6, 0, -4, 8, 3, 0, 18, -6, 8, 12, -6, 16, 5, -1, 14, -12, -4, -10, 0, -4, -6, -6, 2, 0, -12, -16, -6, 24, 2, 2, -5, 1, 2, -2, -2, -8, 0, -12, -12, -20, 1, 0, 0, 12, -17, 26, 4, -6, -4, -2, -4, 16, 12, -12, 4, -14, -4, 6, 2, 16, 6, 2, 6, -4, 0, 22, -12, 0, 6, -22, 0, -20, 0, -8, 8, -2, -5, 19, -4, 18, 6, 14, -1, -24, 18, 4, -6, 0, 1, 4, -8, 14, -4, 4, 6, 4, 4, 8, 0, -24, -6, 26, 2, 2, 16, -18, -6, -8, -14, 4, 0, -24, -1, 2, -4, -18, 6, 0, 8, -4, 12, 6, 8, -8, 1, -14, 9, -14, -12, 0, -4, -1, -12, 0, 10, -28, 2, -2, -1, -2, -20, 10, -12, 0, 14, 6, 4, 32, -6, -3, 26, 5, -2, 12, 2, 0, 0, 2, 12, -6, 0, -10, 24, 12, 0, 4, 1, 12, 8, 0, 8, 0, 3, 8, -2, -4, -18, 6, -4, 0, 3, 4, -22, 32, -4, -18, -24, -4, 1, -30, -4, 0, -14, -2, -2, 24, -18, -22, 4, -6, -8, -12, 0, 24, 10, 12, -16, -12, -2, 38, -4, 0, 18, 6, 0, 2, -4, -8, -8, -24, -1, -14, 0, 4, 18, 0, 6, -24, -24, 1, -12, 36, -6, 28, -16, 6, -7, -30, 1, 8, 14, 8, 12, -4, 12, 10, 10, -6, 0, -10, 4, 16, 2, 0, 6, 36, 2, -4, 0, -2, 36, -16, 16, -4, -6, 6, -24, -16, 10, -12, -2, 0, -5, -36, -1, -8, -6, 4, 2, 20, -2, 12, 8, -8, 0, 0, 12, 4, -12, -8, 20, 24, -3, -28, 0, -9, 0, -10, -12, 6, 11, 4, -26, -16, 4, 0, 6, -10, 12, 18, 2, -20, -4, 1, -16, 0, -4, -23, 12, 12, 4, -4, 14, -8, 12, -4, -6, 4, 2, -34, -16, -26, 30, 36, -2, 4, 6, -2, 4, -8, 0, 16, -22, -12, -12, -2, 0, 8, -2, -24, 22, 4, 0, 28, 20, -1, 0, 10, 8, -4, 8, -8, 2, 0, 7, 34, -19, 2, -4, 12, -18, 24, -18, 4, -14, 28, -1, 0, 24, 22, -6, -6, -4, -12, -6, 24, 0, 48, -3, -6, -4, 4, -8, -10, -14, -16, -20, 2, -4, 0, 6, -26, -4, -4, -12, -6, -8, -20, 0, 0, 24, 14, 2, -19, -26, 16, 2, -36, -2, -40, -48, 4, 18, 0, -6, -2, 8, 0, -6, 18, -4, 20, 0, 8, 24, -40, 3, 48, -2, 0, -4, -18, 18, -8, -2, -6, 0, 12, 8, 22, 4, 12, -36, 8, -6, 0, 8, 16, 8, -8, 5, 34, 14, -1, 9, -18, 14, -18, 36, -12, 0, -12, -4, 12, 1, -10, 4, -12, 0, 20, 10, -4, 28, -24, -6, -12, 2, -6, -1, 30, 2, 24, 28, 0, -10, -14, -12, 6, 0, -16, -42, 0, -6, 16, 4, 24, -32, -48, 2, -8, 3, 2, 26, 2, -5, -40, 6, 1, -12, 24, 2, -18, 0, -2, 0, 16, -2, 36, 12, -8, 6, 0, 0, -12, 10, -12, 24, -4, -12, -32, 0, -20, -4, -16, 1, -10, -12, 0, -24, 18, 0, 18, 8, 12, 0, -24, -17, 2, -8, 26, -2, 14, 4, 0, 54, -6, -6, 8, -4, 0, 0, -2, -1, 4, -4, -44, -22, 16, -32, 14, 12, 4, 18, -12, -24, -26, 4, 0, 5, -14, 30, -24, -4, 0, 0, 6, 42, 42, 2, 44, -2, 16, -24, -8, 6, -16, 22, 2, 4, 38, 6, 24, 24, -4, 12, -12, 0, 14, -24, 22, -14, -6, -12, 16, -16, 0, 12, -8, 6, -25, -38, -22, -4, 18, 0, -5, -6, -20, -6, 0, 0, -10, -2, -8, 12, -14, 8, 44, -8, -2, 24, -24, -5, 20, 14, 19, 0, -64, -4, -8, -54, 18, 0, -12, 6, 46, 24, 14, 8, -6, -1, -28, -12, -24, -36, 8, 18, 0, -28, 4, -16, 0, -6, 8, -3, 0, 30, 0, 1, -36, -8, 4, -42, 52, -8, -4, 12, 14, 4, -24, -4, -48, -10, 4, 10, -4, 6, 8, 0, 4, 10, 0, 4, -6, -16, 8, 10, 26, 0, 4, 6, -24, -36, 48, -6, 42, 4, 26, 0, 38, 2, 0, -12, 2, 16, 44, 16, 12, 4, -18, 18, 26, -6, 16, -24, -8, 16, 6, -14, -31, 12, 4, -2, -4, 0, 40, 15, -24, 36, 12, -1, -12, 8, 2, 2, -30, -4, -56, 2, -18, -20, 24, 6, -44, -12, 0, 8, 0, 8, -16, 0, -4, 0, -48, 12, -26, -4, 6, 36])
M = np.array([[17,2],[42,5]])
vplus = np.array([1,0])
vminus = np.array([0,1])
gamma = np.array([-1,-1])
values = coeffs_calculator(eta_product21, M, vplus, vminus, gamma)
print('ε(M)=', values[5])
print('ω1=',values[3])
print('ω2=',values[4])
print('ω1/ω2',values[3]/values[4])
print('g4=', values[0])
print('g6=', values[1])
print('error4=', values[6])
print('error6=', values[7])
c4 = 12*values[0]
c6 = 216*values[1]
print('c4=',c4)
print('c6=',c6)
c4guess = round(c4.real)
c6guess = round(c6.real)
print('c4guess=',c4guess)
print('c6guess=',c6guess)
u = u_calculator(c4guess, c6guess)
print('u=',u)
c4prime = c4guess/(u**4)
c6prime = c6guess/(u**6)
a = a_calculator(c4prime, c6prime)
delta = (c4prime**3 - c6prime**2)/1728
expected_j = c4prime**3/delta
print('coeffs:',a)                    #order is (a_1,a_3,a_2,a_4,a_6)
print('Δ=',delta,'=',prime_decomp(delta))
print('j=', values[2])
print('expected j=',expected_j)
print('error=',abs(expected_j-values[2]))
