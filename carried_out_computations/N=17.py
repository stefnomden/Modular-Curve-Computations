eta_product17 = np.array([1, -1, 0, -1, -2, 0, 4, 3, -3, 2, 0, 0, -2, -4, 0, -1, 1, 3, -4, 2, 0, 0, 4, 0, -1, 2, 0, -4, 6, 0, 4, -5, 0, -1, -8, 3, -2, 4, 0, -6, -6, 0, 4, 0, 6, -4, 0, 0, 9, 1, 0, 2, 6, 0, 0, 12, 0, -6, -12, 0, -10, -4, -12, 7, 4, 0, 4, -1, 0, 8, -4, -9, -6, 2, 0, 4, 0, 0, 12, 2, 9, 6, -4, 0, -2, -4, 0, 0, 10, -6, -8, -4, 0, 0, 8, 0, 2, -9, 0, 1, -10, 0, 8, -6, 0, -6, 8, 0, 6, 0, 0, -4, -14, 0, -8, -6, 6, 12, 4, 0, -11, 10, 0, -4, 12, 12, 8, 3, 0, -4, 16, 0, -16, -4, 0, 3, -6, 0, -8, 8, 0, 4, 0, 3, -12, 6, 0, 2, -10, 0, -16, -12, -3, 0, -8, 0, -2, -12, 0, 10, 16, -9, 24, 6, 0, 4, -4, 0, -9, 2, 12, -4, 22, 0, -4, 0, 0, -10, 12, -6, -2, 8, 0, 12, 4, 0, 0, 0, 0, -8, -16, 0, 2, -2, 0, -9, -18, 0, -20, -3, 0, 10, 24, 0, 12, -8, -12, 2, 0, 0, 8, -6, 0, -8, -8, 0, 16, -6, 0, 0, -2, 0, 24, -20, 3, 14, -24, 0, 6, 8, 0, 18, -6, -6, 0, 12, 0, -4, -16, 0, 18, 11, 0, 10, -18, 0, 8, 12, 0, -12, 12, 12, 0, -8, 0, -17, 18, 0, -8, -4, -18, -16, -16, 0, -12, 16, 0, -4, 22, 0, -16, -1, 0, 6, 0, 0, 14, 8, -12, -24, -6, 0, -16, 4, 0, 0, -24, 15, 1, 12, 0, 6, 6, 0, 24, -6, 0, 10, -8, 0, 16, 16, 0, 4, 20, 3, -12, 0, 0, 8, 28, 0, -22, 2, 24, -12, -10, 0, 0, -14, 0, -16, -4, -9, 2, -24, 0, -18, 0, 0, 4, 4, 6, 4, -8, 0, -14, 9, 0, 2, 0, -12, 8, 12, 0, -22, 32, 0, -18, 4, 0, 0, -30, 0, 8, -10, 0, -12, 0, 18, -3, 2, 0, 8, 12, 0, 28, -4, 18, -4, 24, 0, 6, 0, 0, 0, -12, 0, -8, -8, 0, 16, -24, 0, 0, -2, -12, -2, 6, 0, 4, 27, 0, 18, -24, 0, 6, 20, 0, 1, -14, 0, -8, 10, -18, -24, 0, 0, 26, -12, 0, -8, -48, 12, 8, 10, 0, 0, 8, 0, 22, -8, 0, 18, -1, 0, -40, -8, 0, 8, 12, 0, 2, -16, 0, -6, -16, 0, -20, 0, -27, 2, 28, 0, -20, -24, 0, 28, 34, -3, 0, 14, 0, 24, 16, 0, -6, -6, 0, 8, -2, 0, 32, -6, 0, 6, 12, -6, 16, 0, 0, -36, 0, 0, 4, -4, -18, 16, 36, 0, 4, -18, 0, 11, -4, 0, 20, -30, 0, 18, 20, 0, 6, -8, 0, -4, -16, 0, -40, -12, 0, -12, -12, -36, 20, 0, 0, -8, -2, 0, -24, 11, 0, -18, -16, 0, 0, 8, 0, 12, 26, 18, -36, -16, 0, 16, 4, 0, -7, 12, 36, 16, 12, 0, -16, 12, 0, -22, 0, 0, 6, 16, 0, -5, -12, 0, -32, 6, 30, 0, -24, 0, 48, -14, 0, 8, 30, 12, -8, 8, 0, 6, -4, 0, 28, 16, 36, -12, -38, 0, -32, 0, 0, 24, -4, -21, -14, -1, 0, 12, -16, 0, 0, -18, -12, -6, 4, 0, -16, -24, 0, 2, 18, 0, -8, 10, 0, 8, -24, 0, 10, -16, -12, 16, 22, 0, 20, 20, 0, -20, 0, 3, -26, 12, 0, 0, -6, 0, -48, 8, 0, -28, 40, 0, -19, 22, 0, 2, -2, -24, 16, 36, 0, 10, -16, 0, -18, 0, 12, -6, -30, 0, 32, -16, 0, 4, 8, 27, 0, -2, 0, -24, 6, 0, -32, 6, 18, 0, 4, 0, 38, -4, 0, -12, 32, -6, 24, 4, 0, 8, 0, 0, 2, 14, 0, 9, 30, 0, 8, -6, 0, 0, -40, -12, 12, -8, 0, -4, -12, 0, -8, -22, 0, -32, 16, 0, -6, 18, 0, 4, -18, 0, 8, 0, 0, 30, -40, 0, -34, -8, -36, 30, 16, 0, 0, -12, 0, 0, 4, -6, 32, 3, 0, 2, -6, 0, 40, -24, -27, -12, 4, 0, -50, -28, 0, -20, 0, -18, 28, -4, 0, -24, 12, 0, 20, -6, 12, 0, 32, 0, 20, 0, 0, 12, 32, 0, 22, 8, 0, 24, -22, 0, 24, 16, 6, 24, 24, 0, -14, 0, 0, -2, -26, 12, -4, 6, 0, -6, 24, 0, 0, -4, 0, -9, 4, 0, -32, 18, 0, 24, -56, 0, 20, -6, 0, 20, -50, 0, 0, 5, -30, 14, 0, 0, -32, 8, 0, -30, 26, 18, 40, -24, 0, 0, -48, 0, -16, -26, 24, -12, -18, 0, 20, 24, 0, 48, -48, 12, -34, -8, 0, -14, 9, 0, 8, 0, 0, -8, 20, 0, 7, -22, 0, -8, 18, 0, -44, -6, 0, 1, -8, 0, 14, 40, -24, 24, 10, 0, 52, 8, 0, -12, 16, 0, -44, -2, 0, -16, 0, 0, -8, 18, -6, 16, 48, 0, 6, 20, 0, 0, -46, 27, -12, 2, 0, -28, 12, 0, 32, 20, 0, -24, 0, 0, -24, 12, 0, -34, 24, -3, 6, 0, 0, -42, 4, 0, 32, 24, 30, -16, -4, 0, 0, 6, 0, -6, 64, 0, 24, -24, 0, 2, 8, 0, 2, -32, -24, -30, -30, 0, -36, 6, 0, -12, 0, 18, 10, -16, 0, 0, 6, 0, -24, 12, 0, 0, 32, 0, 12, -4, 0, 12, -22, 18, 32, 16, 0, -36, -24, 0, -15, -4, -24, -18, -4, 0, 0, -33, 0, 4, -12, 0, -32, -20, 0, 10, 18, 0, 0, 18, -18, -20, 12, 0, 36, -6, 0, -8, 16, 0, -12, -20, 0, 16, 40, 0, 46, 40, 0, 36])
M = np.array([[6,1],[17,3]])
vplus = np.array([2,1])
vminus = np.array([0,1])
gamma = np.array([0,1])
values = coeffs_calculator(eta_product17, M, vplus, vminus, gamma)
print('ε(M)=', values[5])
print('ω1=',values[3])
print('ω2=',values[4])
print('ω1/ω2',values[3]/values[4])
print('g4=', values[0])
print('g6=', values[1])
print('error4=', values[6])
print('error6=', values[7])
c4 = 12*values[0]
c6 = 216*values[1]
print('c4=',c4)
print('c6=',c6)
c4guess = round(c4.real)
c6guess = round(c6.real)
print('c4guess=',c4guess)
print('c6guess=',c6guess)
u = u_calculator(c4guess, c6guess)
print('u=',u)
c4prime = c4guess/(u**4)
c6prime = c6guess/(u**6)
a = a_calculator(c4prime, c6prime)
delta = (c4prime**3 - c6prime**2)/1728
expected_j = c4prime**3/delta
print('coeffs:',a)                    #order is (a_1,a_3,a_2,a_4,a_6)
print('Δ=',delta,'=',prime_decomp(delta))
print('j=', values[2])
print('expected j=',expected_j)
print('error=',abs(expected_j-values[2]))
